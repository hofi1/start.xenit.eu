plugins {
    id 'java'
    id 'org.springframework.boot' version '2.1.4.RELEASE'
    id 'eu.xenit.docker' version '4.0.3'
    id 'idea'
}

apply plugin: 'io.spring.dependency-management'

allprojects {
    group = 'eu.xenit.alfred'
    version = '0.0.2-SNAPSHOT'
}

sourceCompatibility = 1.8

ext {
    springInitializrVersion = '0.8.0.BUILD-SNAPSHOT'
}

repositories {
    mavenCentral()

    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
    maven { url "https://repo.spring.io/release" }
}

bootRun {
    jvmArgs = ["-Dspring.output.ansi.enabled=ALWAYS"]
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

dependencies {
    implementation('org.springframework.boot:spring-boot-starter-web')
    implementation('org.springframework.boot:spring-boot-starter-actuator')

    implementation("io.spring.initializr:initializr-web:${springInitializrVersion}") {
        exclude group: "io.spring.initializr", module:"initializr-generator-spring"
    }

    implementation project(':initializr-generator-beans-xml-config')
    implementation('org.springframework.boot:spring-boot-devtools')

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    developmentOnly("org.springframework.boot:spring-boot-devtools")

    testImplementation('org.springframework.boot:spring-boot-starter-test')
    testImplementation("io.spring.initializr:initializr-generator-test:${springInitializrVersion}")
}

test {

}

dockerFile {
    dockerFile = file('Dockerfile')
    dockerBuild {
        repository = 'hub.xenit.eu/start.xenit.eu'
        tags = [ project.version ]
        automaticTags = true
    }
}

buildDockerImage {
    dependsOn(bootJar)
    buildArgs = [
        'JAR_FILE': "build/libs/${tasks.bootJar.getArchiveName()}"
    ]
}
